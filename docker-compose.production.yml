# Production Environment Docker Compose Configuration

services:
  # PostgreSQL データベース（本番環境）
  postgres-prod:
    image: postgres:15-alpine
    container_name: glasses_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-glasses_store_prod}
      POSTGRES_USER: ${POSTGRES_USER:-glasses_prod_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-GlassesStore2025ProdPassword!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./backend/database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql:ro
      - ./backend/database/seed.sql:/docker-entrypoint-initdb.d/03-seed.sql:ro
    ports:
      - "15432:5432"
    networks:
      - glasses_network_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-glasses_prod_user} -d ${POSTGRES_DB:-glasses_store_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis キャッシュ・セッション管理（本番環境）
  redis-prod:
    image: redis:7-alpine
    container_name: glasses_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --appendfsync everysec --requirepass ${REDIS_PASSWORD:-GlassesStore2025RedisPassword!}
    volumes:
      - redis_data_prod:/data
    ports:
      - "16379:6379"
    networks:
      - glasses_network_prod
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-GlassesStore2025RedisPassword!}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # バックエンド API サーバー（本番環境）
  backend-prod:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: glasses_backend_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      HOST: 0.0.0.0
      DB_HOST: postgres-prod
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-glasses_store_prod}
      DB_USER: ${POSTGRES_USER:-glasses_prod_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-GlassesStore2025ProdPassword!}
      REDIS_HOST: redis-prod
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-GlassesStore2025RedisPassword!}
      JWT_SECRET: ${JWT_SECRET:-GlassesStore2025ProductionJWTSecret!VerySecure}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-GlassesStore2025RefreshSecret!VerySecure}
      SESSION_SECRET: ${SESSION_SECRET:-GlassesStore2025SessionSecret!VerySecure}
      UPLOAD_DIR: /app/uploads
      CORS_ORIGIN: http://localhost:8080
    volumes:
      - ./uploads-prod:/app/uploads
      - ./logs-prod/app:/app/logs
      - backend_node_modules_prod:/app/node_modules
    ports:
      - "8001:3001"
    depends_on:
      postgres-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
    networks:
      - glasses_network_prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # フロントエンド React アプリケーション（本番環境）
  frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        REACT_APP_API_BASE_URL: http://localhost:8001/api
        REACT_APP_WS_URL: ws://localhost:8001
        REACT_APP_USE_MOCK_API: "false"
    container_name: glasses_frontend_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 80
      REACT_APP_API_BASE_URL: http://localhost:8001/api
      REACT_APP_WS_URL: ws://localhost:8001
      REACT_APP_USE_MOCK_API: "false"
    volumes:
      - frontend_node_modules_prod:/app/node_modules
    ports:
      - "8080:80"
    depends_on:
      - backend-prod
    networks:
      - glasses_network_prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx リバースプロキシ（本番環境）
  nginx-prod:
    image: nginx:1.25-alpine
    container_name: glasses_nginx_prod
    restart: unless-stopped
    ports:
      - "8090:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs-prod:/etc/nginx/certs:ro
      - ./logs-prod/nginx:/var/log/nginx
    depends_on:
      - frontend-prod
      - backend-prod
    networks:
      - glasses_network_prod
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_prod:
  redis_data_prod:
  backend_node_modules_prod:
  frontend_node_modules_prod:

networks:
  glasses_network_prod:
    driver: bridge
