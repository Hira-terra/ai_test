# 本番環境用 Docker Compose 設定
# 使用方法: docker-compose -f docker-compose.yml -f docker-compose.production.yml --env-file .env.production up -d

services:
  # PostgreSQL - 本番設定強化
  postgres:
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-glasses_store_db}
      POSTGRES_USER: ${POSTGRES_USER:-glasses_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./backend/database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql:ro
      - ./backend/database/seed.sql:/docker-entrypoint-initdb.d/03-seed.sql:ro
      - ./backups/postgres:/backups
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c temp_file_limit=2GB
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on

  # Redis - 本番設定強化
  redis:
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./backups/redis:/backups

  # バックエンド - 本番ビルド使用
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      HOST: 0.0.0.0
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-glasses_store_db}
      DB_USER: ${POSTGRES_USER:-glasses_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      UPLOAD_DIR: /app/uploads
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./uploads:/app/uploads
      - ./logs/app:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # フロントエンド - 本番ビルド使用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        REACT_APP_API_BASE_URL: ${CORS_ORIGIN}/api
        REACT_APP_WS_URL: ${CORS_ORIGIN_WS:-ws://bl-glasses-01-env.eba-paavtara.ap-northeast-1.elasticbeanstalk.com}
        REACT_APP_USE_MOCK_API: "false"
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      REACT_APP_API_BASE_URL: ${CORS_ORIGIN}/api
      REACT_APP_WS_URL: ${CORS_ORIGIN_WS:-ws://bl-glasses-01-env.eba-paavtara.ap-northeast-1.elasticbeanstalk.com}
      REACT_APP_USE_MOCK_API: "false"
    depends_on:
      - backend

  # Nginx - 本番用設定
  nginx:
    restart: unless-stopped
    volumes:
      - ./nginx/conf.d/production.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - backend
      - frontend

  # pgAdmin - 本番用設定（オプション）
  pgadmin:
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@glasses-store.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'True'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'True'
      PGADMIN_LISTEN_ADDRESS: '0.0.0.0'
      PGADMIN_LISTEN_PORT: 80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgladmin/servers.json:/pgladmin4/servers.json:ro
    # 本番環境では外部からのアクセスを制限
    ports: []
    expose:
      - "80"

# 本番用ボリューム設定
volumes:
  postgres_data:
    driver: local
    name: glasses_store_prod_postgres_data
  
  redis_data:
    driver: local
    name: glasses_store_prod_redis_data
  
  pgadmin_data:
    driver: local
    name: glasses_store_prod_pgadmin_data

# 本番用ネットワーク設定
networks:
  glasses_network:
    driver: bridge
    name: glasses_network_prod